void Player::Move(vector<Shapes*> theshapes, SDL_Renderer * grender)
{
	/*error fix info
	there were wierd bugs but I think it was all dealing with precision. The player position I made doubles and just casted when printing
	and the cos and sin values I rounded to 3 decimal places to avoid weird .0008 stuff this seemse to work now. It was just precision errors
	*/
	/*corner error fix
	in real life you dont move x and y then check like go in the ground and move right then check.
	So I move y first then deal with y physics. then move x and deal with x physics. this has to run the physics twice though. but can make efficient with circle
	*/
	/*slope error fix
	just see if the slope isnt horinzontal or vertical then get the ratio of x to y by 1/slope move x one then move y to that ratio. It automatically takes care of x slow down
	because y moves up then it tries to go right if it hits then y goes up again. clean.
	*/
	/*multiple object fix
	made it so it checks x first because x changes y but y doesnt change x. So x changes y then we can update y and from there the y can take care of it.
	*/
	/*slope bouncy visual fix
	just made it so if its a slope it claculates the x and y needed first without actually moving player. then it moves y plaeyr based on that, then x player based on that very smooth
	a little inneficient.
	*/
	/*moving object error fix
	*/
	bool breakfree = false;
	double pastxvelocity = xvelocity;
	double pastxposition = playerx;
	double pastyposition = playery;
	int xvelocitysign = 1;
	if (xvelocity < 0)
		xvelocitysign = -1;
	bool ychangedfromslope = false;
	double ychangeamount = 0;
	double xchangeamount = 0;
	bool yfirst = false;
	int yvelocitysign = 1;
	if (yvelocity < 0)
		yvelocitysign = -1;
	//double extraxamountinvelocity = xvelocitysign * (abs(xvelocity - static_cast<int>(xvelocity))) / abs(xvelocity);
	double counter = 0;
	for (int x = 0; x < abs(xvelocity); x++)
	{
		if (breakfree)
			break;
		playerx += xvelocitysign;
		counter += xvelocitysign;
		//playery += yvelocitysign;
		UpdateHitBox();
		IsPlayerHittingAnyShapes(theshapes, grender);
		//playery -= yvelocitysign;
		for (int i = 0; i < playercollisioninfo.size(); i++)
		{
			vec2d smallerpoint = playercollisioninfo[i].theline.pointone;
			if (playercollisioninfo[i].theline.pointtwo.y > smallerpoint.y)
				smallerpoint = playercollisioninfo[i].theline.pointtwo;
			if (playercollisioninfo[i].sidehit == 0 || playercollisioninfo[i].sidehit == 2)
			{
				if (playercollisioninfo[i].lineslope != 0)
				{
					if (playercollisioninfo[i].lineangle >= 80 || playery+playerheight >= smallerpoint.y)
					{
						playerx -= xvelocitysign;
						break;
					}
					yfirst = true;
					ychangedfromslope = true;
					playerx -= counter;
					xchangeamount = xvelocity * ((90.0 - playercollisioninfo[i].lineangle) / 90.0);
					ychangeamount = -abs(playercollisioninfo[i].lineslope);;
					breakfree = true;
					break;
				}
			}
			if (playercollisioninfo[i].sidehit == 1 || playercollisioninfo[i].sidehit == 3)
			{
				if ((round(sin((playercollisioninfo[i].lineangle * 3.14) / 180) * 1000.0) / 1000.0) <= .001)//horizontal line
				{

				}
				else if (playercollisioninfo[i].lineslope == 0) //vertical
				{
					playerx -= xvelocitysign;
				}
				else
				{
					if (playercollisioninfo[i].lineangle >= 80 || playery + playerheight >= smallerpoint.y)
					{
						playerx -= xvelocitysign;
						break;
					}
					ychangedfromslope = true;
					playerx -= counter;
					xchangeamount = xvelocity * ((90.0 - playercollisioninfo[i].lineangle) / 90.0);
					ychangeamount = -abs(playercollisioninfo[i].lineslope);
					breakfree = true;
					break;
				}
			}
			UpdateHitBox();
		}
	}
	UpdateHitBox();

	if (ychangedfromslope)
	{
		yvelocity += ychangeamount * abs(xchangeamount);//-1 to add protection against slope misclaculations to not go through wall
		yvelocity -= playergravity;
	}
	 yvelocitysign = 1;
	if (yvelocity < 0)
		yvelocitysign = -1;
	for (int x = 0; x < abs(yvelocity); x++)
	{
		playery += yvelocitysign;
		UpdateHitBox();
		IsPlayerHittingAnyShapes(theshapes, grender);
		for (int i = 0; i < playercollisioninfo.size(); i++)
		{
			if (playercollisioninfo[i].sidehit == 0 || playercollisioninfo[i].sidehit == 2)
			{
				if ((round(cos((playercollisioninfo[i].lineangle * 3.14) / 180) * 1000.0) / 1000.0) > .001)
				{
					playery -= yvelocitysign;
				}
			}
			UpdateHitBox();
		}
	}
	xvelocitysign = 1;
	if (xchangeamount < 0)
		xvelocitysign = -1;
	for (double x = 0; x < abs(xchangeamount); x++)
	{
		playerx += xvelocitysign;
		UpdateHitBox();
		IsPlayerHittingAnyShapes(theshapes, grender);
		for (int i = 0; i < playercollisioninfo.size(); i++)
		{
			if (playercollisioninfo[i].sidehit == 1 || playercollisioninfo[i].sidehit == 3)
			{
				if ((round(sin((playercollisioninfo[i].lineangle * 3.14) / 180) * 1000.0) / 1000.0) > .001)//not horizontal
				{
					playerx -= xvelocitysign;
				}
			}
			UpdateHitBox();
		}
	}
	//see if players bottom y is higher than lines bottom y
	if (ychangedfromslope && pastxposition == playerx)
	{
		//playery = pastyposition;
		//playery += playergravity;
	}
	UpdateHitBox();
	xvelocity = 0;
	yvelocity = 0;
}